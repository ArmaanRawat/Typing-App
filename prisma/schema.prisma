generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  email        String   @unique
  name         String?
  passwordHash String
  image        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  accounts    Account[]
  sessions    Session[]
  testResults TestResult[]
}

model TestResult {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  // Core metrics
  durationSec Int
  mode        String // "time" | "chars"
  targetValue Int // 15/30/60 or 100/200
  wpm         Float
  rawWpm      Float
  accuracy    Float // 0..1
  backspaces  Int
  errors      Int
  charsTyped  Int
  wordsTyped  Int

  // Content
  source    String // "random" | "custom"
  snippetId String? @db.ObjectId

  createdAt DateTime @default(now())

  @@index([userId, createdAt], map: "idx_user_createdAt")
  @@index([wpm], map: "idx_wpm")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
